// Copyright (C) 2017  Intel Corporation. All rights reserved.
// Your use of Intel Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Intel Program License 
// Subscription Agreement, the Intel Quartus Prime License Agreement,
// the Intel FPGA IP License Agreement, or other applicable license
// agreement, including, without limitation, that your use is for
// the sole purpose of programming logic devices manufactured by
// Intel and sold by Intel or its authorized distributors.  Please
// refer to the applicable agreement for further details.


// Generated by Quartus Prime Version 17.1 (Build Build 590 10/25/2017)
// Created on Sat Dec 22 20:48:25 2018

DoLineFall DoLineFall_inst
(
	.clk(clk_sig) ,	// input  clk_sig
	.DisLine(DisLine_sig) ,	// input [0:479] DisLine_sig
	.FallLine(FallLine_sig) ,	// output [0:479] FallLine_sig
	.CharLine(CharLine_sig) ,	// input [35:0] CharLine_sig
	.WCharLine(WCharLine_sig) ,	// output [35:0] WCharLine_sig
	.LineNum(LineNum_sig) ,	// output [7:0] LineNum_sig
	.CharReady(CharReady_sig) ,	// output  CharReady_sig
	.Font(Font_sig) ,	// input [143:0] Font_sig
	.Ascii(Ascii_sig) ,	// input [7:0] Ascii_sig
	.f_addr(f_addr_sig) ,	// input [9:0] f_addr_sig
	.h_addr(h_addr_sig) ,	// input [9:0] h_addr_sig
	.w_addr(w_addr_sig) ,	// output [9:0] w_addr_sig
	.ready(ready_sig) ,	// output  ready_sig
	.KeyAscii(KeyAscii_sig) ,	// input [12:0] KeyAscii_sig
	.clra(clra_sig) ,	// input  clra_sig
	.boss(boss_sig) ,	// output  boss_sig
	.boss_show(boss_show_sig) ,	// output  boss_show_sig
	.Vmax(Vmax_sig) ,	// output [12:0] Vmax_sig
	.win(win_sig) ,	// output  win_sig
	.lose(lose_sig) 	// output  lose_sig
);

